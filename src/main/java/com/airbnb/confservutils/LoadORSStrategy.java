/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.airbnb.confservutils;

import Utils.Pair;
import com.genesyslab.platform.applicationblocks.com.CfgObject;
import com.genesyslab.platform.applicationblocks.com.ConfigException;
import com.genesyslab.platform.applicationblocks.com.objects.CfgDN;
import com.genesyslab.platform.applicationblocks.com.objects.CfgScript;
import com.genesyslab.platform.applicationblocks.com.queries.CfgDNQuery;
import com.genesyslab.platform.applicationblocks.com.queries.CfgScriptQuery;
import com.genesyslab.platform.commons.GEnum;
import com.genesyslab.platform.commons.collections.KeyValueCollection;
import com.genesyslab.platform.commons.protocol.ProtocolException;
import com.genesyslab.platform.configuration.protocol.types.CfgDNType;
import com.genesyslab.platform.configuration.protocol.types.CfgObjectType;
import com.genesyslab.platform.configuration.protocol.types.CfgScriptType;
import com.jidesoft.swing.CheckBoxListSelectionModel;
import java.awt.HeadlessException;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.logging.Level;
import javax.swing.AbstractButton;
import javax.swing.ButtonModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author stepan_sydoruk
 */
public class LoadORSStrategy extends javax.swing.JPanel implements IUpdateSettings, IConfigPanel {

    private final AppForm theForm;
    private ConfigServerManager configServerManager;
    private final String sRPsTitle;
    private final String sORSTitle;

    /**
     * Creates new form AppByDBID
     */
    public LoadORSStrategy(AppForm _theForm) {
        initComponents();
        theForm = _theForm;
        Border b = jpRoutingPoints.getBorder();
        sRPsTitle = (b instanceof TitledBorder) ? ((TitledBorder) b).getTitle() : null;
        b = jpORSStrategies.getBorder();
        sORSTitle = (b instanceof TitledBorder) ? ((TitledBorder) b).getTitle() : null;

        ItemListener itemListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {

                AbstractButton aButton = (AbstractButton) e.getSource();
                ButtonModel aModel = aButton.getModel();

                rbActionChanged(aButton.getModel().isSelected(), aButton);

            }
        };

    }

    private void rbActionChanged(boolean isSelected, AbstractButton rbButton) {
    }

    private static final Logger logger = Main.getLogger();

    private final ArrayList<UserProperties> updateProperties = new ArrayList<>();

    private GEnum cfgObjType(Object o) {
        if (o == null || o instanceof String) {
            return null;
        } else {
            return ((CfgObjectTypeMenu) o).getType();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        bgReplaceAction = new javax.swing.ButtonGroup();
        jpRoutingPoints = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlRPs = new javax.swing.JList<>();
        jbSelectRoutingPoints = new javax.swing.JButton();
        jpORSStrategies = new javax.swing.JPanel();
        jcbORSStrategies = new javax.swing.JComboBox<>();
        jbSelectStrategies = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jpRoutingPoints.setBorder(javax.swing.BorderFactory.createTitledBorder("Routing points"));
        jpRoutingPoints.setLayout(new javax.swing.BoxLayout(jpRoutingPoints, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(jlRPs);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jpRoutingPoints.add(jPanel1);

        jbSelectRoutingPoints.setText("Select...");
        jbSelectRoutingPoints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSelectRoutingPointsActionPerformed(evt);
            }
        });
        jpRoutingPoints.add(jbSelectRoutingPoints);

        add(jpRoutingPoints);

        jpORSStrategies.setBorder(javax.swing.BorderFactory.createTitledBorder("ORS strategies"));
        jpORSStrategies.setLayout(new javax.swing.BoxLayout(jpORSStrategies, javax.swing.BoxLayout.PAGE_AXIS));

        jpORSStrategies.add(jcbORSStrategies);

        jbSelectStrategies.setText("Select...");
        jbSelectStrategies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSelectStrategiesActionPerformed(evt);
            }
        });
        jpORSStrategies.add(jbSelectStrategies);

        add(jpORSStrategies);
    }// </editor-fold>//GEN-END:initComponents

    private void jbSelectStrategiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSelectStrategiesActionPerformed
        loadStrategies(false);

    }//GEN-LAST:event_jbSelectStrategiesActionPerformed

    private void jbSelectRoutingPointsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSelectRoutingPointsActionPerformed
        loadPRs(false);
    }//GEN-LAST:event_jbSelectRoutingPointsActionPerformed

    public ArrayList<UserProperties> getUpdateProperties() {
        return updateProperties;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgReplaceAction;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbSelectRoutingPoints;
    private javax.swing.JButton jbSelectStrategies;
    private javax.swing.JComboBox<String> jcbORSStrategies;
    private javax.swing.JList<String> jlRPs;
    private javax.swing.JPanel jpORSStrategies;
    private javax.swing.JPanel jpRoutingPoints;
    // End of variables declaration//GEN-END:variables

    public String getSearchSummary(int maxTypes) {
        StringBuilder buf = new StringBuilder();
        buf.append("App by options;");
        return buf.toString();

    }

    private void modelUncheck(CheckBoxListSelectionModel selectionModel, GEnum[] gEnum) {
        HashSet<GEnum> en = new HashSet<>(Arrays.asList(gEnum));

        DefaultListModel model = (DefaultListModel) selectionModel.getModel();
        selectionModel.clearSelection();
        for (int i = 0; i < model.size(); i++) {
            if (i != selectionModel.getAllEntryIndex()) {
                CfgObjectTypeMenu get = (CfgObjectTypeMenu) model.get(i);
                if (!en.contains(get.getType())) {
                    selectionModel.addSelectionInterval(i, i);
                }
            }
        }

    }

    String getSearchSummaryHTML() {
        StringBuilder ret = new StringBuilder();
        ret.append("<html>").append(getSearchSummary(2).replaceAll("\n", "<br>")).append("</html>");
        return ret.toString();

    }

    @Override
    public String getReplaceKey(String stringKey) {
        return stringKey;
    }

    @Override
    public Collection<UserProperties> getAddedKVP() {
        return updateProperties;

    }

    @Override
    public boolean isMakeBackup() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public UpdateAction getUpdateAction() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String replaceWith(String currentValue) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    boolean yesToAll;
    UpdateCFGObjectProcessor upd = null;

    void doUpdate(ConfigServerManager configServerManager) {
        this.configServerManager = configServerManager;
        yesToAll = false;
        String selApp = (String) ((ComboItem) jcbORSStrategies.getSelectedItem()).getObj();

        class AUpdateSettings implements IUpdateSettings {

            private boolean oneActive = false;

            public AUpdateSettings() {
            }

            @Override
            public boolean isMakeBackup() {
                return false;
            }

            @Override
            public IUpdateSettings.UpdateAction getUpdateAction() {
                return IUpdateSettings.UpdateAction.ADD_SECTION;
            }

            @Override
            public String replaceWith(String currentValue) {
                return "bb";

            }

            public void setOneActive(boolean oneActive) {
                this.oneActive = oneActive;
            }

            @Override
            public String getReplaceKey(String currentValue) {
                return "aa";
            }

            @Override
            public Collection<UserProperties> getAddedKVP() {
                ArrayList<UserProperties> prop = new ArrayList<>();
                prop.add(new UserProperties("Orchestration", "application", "script:" + selApp));
                return prop;
            }
        }

        AUpdateSettings us = new AUpdateSettings();

        upd = new UpdateCFGObjectProcessor(configServerManager, CfgObjectType.CFGDN, theForm);
//        upd.setCustomKVPProc(new UpdateUserProperties.ICustomKVP() {
//            @Override
//            public KeyValueCollection getCustomKVP(CfgObject _obj) {
//                return ((CfgApplication) _obj).getOptions();
//            }
//        });
        int[] selectedIndices = jlRPs.getSelectedIndices();
        for (int i = 0; i < selectedIndices.length; i++) {

            boolean shouldStop = false;
            ComboItem selDN = (ComboItem) ((DefaultListModel) jlRPs.getModel()).getElementAt(selectedIndices[i]);
            CfgObject obj = (CfgObject) selDN.getObj();

            KeyValueCollection kv = new KeyValueCollection();

            try {
                if (yesToAll) {
                    us.setOneActive(false);
                    upd.updateObj(us, (CfgObject) selDN.getObj(), null, configServerManager);
                } else {
                    us.setOneActive(false);
//                upd = new UpdateUserProperties(configServerManager, CfgObjectType.CFGDN, theForm);
                    String estimateUpdateObj = upd.estimateUpdateObj(us, obj, null, configServerManager);
                    switch (theForm.showYesNoPanel("Load ORS strategy on DN", "Object " + (i + 1) + " of matched " + selectedIndices.length
                            + "\ntoUpdate: \n----------------------\n" + estimateUpdateObj
                            + "\n-->\n" + obj.toString() + "\n\t kv: " + kv.toString()
                    )) {
                        case AppForm.YES_TO_ALL:
                            if (JOptionPane.showConfirmDialog(theForm,
                                    "Are you sure you want to modify this and all following found objects?",
                                    "Please confirm",
                                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {

                                yesToAll = true;
                                us.setOneActive(false);
                                upd.updateObj(us, obj, kv, configServerManager);
                                break;
                            }
                            break;

                        case JOptionPane.YES_OPTION:
                            us.setOneActive(false);
                            upd.updateObj(us, obj, kv, configServerManager);
                            break;

                        case JOptionPane.NO_OPTION:
                            break;

                        case JOptionPane.CANCEL_OPTION:
                            shouldStop = true;
                            break;
                    }
                }
                if (shouldStop) {
                    break;
                }
            } catch (ProtocolException | HeadlessException protocolException) {
                theForm.showError("Exception while updating: " + protocolException.getMessage());

            }
        }

    }

    private ArrayList<ComboItem> findStrategies(boolean getAll) {

        upd = null;
        yesToAll = false;
        FindObject objName;

        if (!getAll) {
            objName = theForm.getObjName(CfgScript.class.getSimpleName() + " type " + CfgScriptType.CFGEnhancedRouting);

            if (objName == null) {
                return null;
            }
        } else {
            objName = null;
        }
        ArrayList<ComboItem> ret = new ArrayList<>();

//<editor-fold defaultstate="collapsed" desc="iSearchSettings">
        ISearchSettings seearchSettings = new ISearchSettings() {
            @Override
            public boolean isCaseSensitive() {
                return (objName == null) ? false : objName.isCaseSensitive();
            }

            @Override
            public boolean isRegex() {
                return (objName == null) ? false : objName.isRegex();
            }

            @Override
            public boolean isFullOutputSelected() {
                return false;
            }

            @Override
            public boolean isSearchAll() {
                return false;
            }

            @Override
            public String getAllSearch() {
                return null;
            }

            @Override
            public String getSection() {
                return "Application";
            }

            @Override
            public String getObjName() {
                return (objName == null) ? null : objName.getName();
            }

            @Override
            public String getOption() {
                return null;
            }

            @Override
            public String getValue() {
                return null;
            }

        };
//</editor-fold>
        ICfgObjectFoundProc foundProc = new ICfgObjectFoundProc() {
            @Override
            public boolean proc(CfgObject obj, KeyValueCollection kv, int current, int total) {
                CfgScript o = (CfgScript) obj;
                ret.add(new ComboItem(o.getName() + " @ " + o.getObjectPath(), o.getName()));
                return true;
            }

        };

        CfgObjectType value = CfgObjectType.CFGScript;
        try {

            CfgScriptQuery query = new CfgScriptQuery();
//                setQueryNameFilter(query, objName.getName(), objName.isRegex());
            query.setScriptType(CfgScriptType.CFGEnhancedRouting);

            if (theForm.findObjects(
                    query,
                    CfgScript.class,
                    new IKeyValueProperties() {
                @Override
                public KeyValueCollection getProperties(CfgObject obj) {
                    return ((CfgScript) obj).getUserProperties();
                }

                @Override
                public Collection<String> getName(CfgObject obj) {
                    Collection<String> ret = new ArrayList<>();
                    ret.add(((CfgScript) obj).getName());
                    return ret;
                }
            },
                    new FindWorker(seearchSettings), true, foundProc)) {

            }

        } catch (ConfigException | InterruptedException ex) {
            java.util.logging.Logger.getLogger(AppForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ret;
    }

    private ArrayList<ComboItem> findRPs(boolean getAll) {

        upd = null;
        yesToAll = false;
        FindObject objName;

        if (!getAll) {
            objName = theForm.getObjName(CfgDN.class.getSimpleName() + " type " + CfgDNType.CFGRoutingPoint);

            if (objName == null) {
                return null;
            }
        } else {
            objName = null;
        }
        ArrayList<ComboItem> ret = new ArrayList<>();

//<editor-fold defaultstate="collapsed" desc="iSearchSettings">
        ISearchSettings seearchSettings = new ISearchSettings() {
            @Override
            public boolean isCaseSensitive() {
                return (objName == null) ? false : objName.isCaseSensitive();
            }

            @Override
            public boolean isRegex() {
                return (objName == null) ? false : objName.isRegex();
            }

            @Override
            public boolean isFullOutputSelected() {
                return false;
            }

            @Override
            public boolean isSearchAll() {
                return false;
            }

            @Override
            public String getAllSearch() {
                return null;
            }

            @Override
            public String getSection() {
                return null;
            }

            @Override
            public String getObjName() {
                return (objName == null) ? null : objName.getName();
            }

            @Override
            public String getOption() {
                return null;
            }

            @Override
            public String getValue() {
                return null;
            }

        };
//</editor-fold>
        ICfgObjectFoundProc foundProc = new ICfgObjectFoundProc() {
            @Override
            public boolean proc(CfgObject obj, KeyValueCollection kv, int current, int total) {
                CfgDN o = (CfgDN) obj;
                ret.add(new ComboItem(o.getName(), o));
                return true;
            }

        };

        try {

            CfgDNQuery query = new CfgDNQuery();
//                setQueryNameFilter(query, objName.getName(), objName.isRegex());
            query.setDnType(CfgDNType.CFGRoutingPoint);

            if (theForm.findObjects(
                    query,
                    CfgDN.class,
                    new IKeyValueProperties() {
                @Override
                public KeyValueCollection getProperties(CfgObject obj) {
                    return ((CfgDN) obj).getUserProperties();
                }

                @Override
                public Collection<String> getName(CfgObject obj) {
                    Collection<String> ret = new ArrayList<>();
                    ret.add(((CfgDN) obj).getName());
                    return ret;
                }
            },
                    new FindWorker(seearchSettings), true, foundProc)) {

            }

        } catch (ConfigException | InterruptedException ex) {
            java.util.logging.Logger.getLogger(AppForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ret;
    }

    @Override
    public void showProc() {
        if (jcbORSStrategies.getModel() != null && jcbORSStrategies.getModel().getSize() == 0) {
            loadStrategies(true);
        }
        if (jlRPs.getModel() != null && jlRPs.getModel().getSize() == 0) {
            loadPRs(true);
        }
    }

    private void adjustBorderTitle(JPanel thePanel, String sBaseTitle, ArrayList<ComboItem> r) {
        Border b = thePanel.getBorder();
        if (b instanceof TitledBorder) {
            ((TitledBorder) b).setTitle(((sBaseTitle == null) ? "" : sBaseTitle + " ") + "(" + r.size() + ")");
            thePanel.repaint();
        }

    }

    private class ComboItem extends Pair<String, Object> implements Comparable<Object> {

        private ComboItem(String displayName, Object refObject) {
            super(displayName, refObject);
        }

        @Override
        public String toString() {
            return getKey();
        }

        public Object getObj() {
            return getValue();
        }

        @Override
        public int compareTo(Object o) {
            ComboItem ob = (ComboItem) o;
            return this.toString().compareTo(ob.toString());
        }

    }

    private void loadStrategies(boolean loadAll) {
        ArrayList<ComboItem> r = findStrategies(loadAll);
        if (r != null) {
            Collections.sort(r);
            DefaultComboBoxModel aModel = new DefaultComboBoxModel<>(r.toArray());
            jcbORSStrategies.setModel(aModel);
            adjustBorderTitle(jpORSStrategies, sORSTitle, r);
            theForm.invalidate();

        }
    }

    private void loadPRs(boolean loadAll) {
        ArrayList<ComboItem> r = findRPs(loadAll);
        if (r != null) {
            Collections.sort(r);
            DefaultListModel aModel = new DefaultListModel();
            for (ComboItem comboItem : r) {
                aModel.addElement(comboItem);
            }
//            DefaultListModel aModel = new DefaultListModel<>(r.toArray());
            jlRPs.setModel(aModel);
            adjustBorderTitle(jpRoutingPoints, sRPsTitle, r);
            theForm.invalidate();
        }
    }

}
