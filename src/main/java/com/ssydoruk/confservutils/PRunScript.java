/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ssydoruk.confservutils;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.apache.logging.log4j.LogManager;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;

import com.ssydoruk.confservutils.DialogRunScript.IDocUpdated;

import Utils.FileWatcher;

/**
 *
 * @author stepan_sydoruk
 */
public class PRunScript extends javax.swing.JPanel {

	private ConfigServerManager csManager;
	private File script;
	private IDocUpdated theDocUpdated;

	private void docUpdated(DocumentEvent e) {
		if (theDocUpdated != null) {
			theDocUpdated.docUpdated(DialogRunScript.DOC_STATE.EDITED);
		}
	}

	/**
	 * Creates new form PRunScript
	 */
	public PRunScript() {
		initComponents();

		editScript = new RSyntaxTextArea(20, 60);
		editScript.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
		editScript.setCodeFoldingEnabled(true);
		editScript.getDocument().addDocumentListener(new DocumentListener() {
			@Override
			public void insertUpdate(DocumentEvent e) {
				docUpdated(e);
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				docUpdated(e);
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				docUpdated(e);
			}

		});
		RTextScrollPane sp = new RTextScrollPane(editScript);

		pEditScript.add(sp);
//        cp.add(sp);

	}

	RSyntaxTextArea editScript;

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jSplitPane1 = new javax.swing.JSplitPane();
		pEditScript = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		showLog = new javax.swing.JTextArea();

		setLayout(new java.awt.BorderLayout());

		jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

		pEditScript.setBorder(javax.swing.BorderFactory.createTitledBorder("Script"));
		pEditScript.setLayout(new java.awt.BorderLayout());
		jSplitPane1.setLeftComponent(pEditScript);

		jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Script output"));
		jPanel2.setLayout(new java.awt.BorderLayout());

		showLog.setColumns(20);
		showLog.setRows(5);
		jScrollPane1.setViewportView(showLog);

		jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

		jSplitPane1.setRightComponent(jPanel2);

		add(jSplitPane1, java.awt.BorderLayout.CENTER);
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JPanel pEditScript;
	private javax.swing.JTextArea showLog;
	// End of variables declaration//GEN-END:variables

	void clearLog() {
		showLog.setText(null);
	}

	FileWatcher fw = null;

	void setParams(File scriptFile, ConfigServerManager configServerManager, IDocUpdated _theDocUpdated) {
		this.script = scriptFile;
		this.theDocUpdated = _theDocUpdated;
		try {
			fw = new FileWatcher(scriptFile, 10) {
				@Override
				public void doOnChange(File f) {
					editScript.setText(Utils.FileUtils.loadFile(scriptFile));
					if (theDocUpdated != null) {
						theDocUpdated.docUpdated(DialogRunScript.DOC_STATE.EXTERNALLY_MODIFIED);
					}
				}
			};
		} catch (IOException ex) {
			Logger.getLogger(PRunScript.class.getName()).log(Level.SEVERE, null, ex);
		}
		fw.watch();
		editScript.setText(Utils.FileUtils.loadFile(scriptFile));
		csManager = configServerManager;
		showLog.setSize(showLog.getWidth(), editScript.getHeight());
	}

	void runScript(boolean forceFile) {
		(new SwingWorker<Object, Object>() {
			@Override
			protected Object doInBackground() throws Exception {
//                if (csManager.connectToConfigServer()) {
				JSRunner.runFile(script.getAbsolutePath(), csManager, (str) -> {
					appendLog(str);
				}, (str) -> {
					appendLog("<stderr> " + str);
				}, forceFile);

//                JSRunner.runScript(Utils.FileUtils.loadFile(new File(script.getAbsolutePath())), csManager,
//                        null);
//                }
				return null;
			}

		}).execute();

	}

	final Object syncObj = new Object();

	private void appendLog(String string) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				synchronized (syncObj) {
					showLog.setText(showLog.getText() + string + "\n");
					showLog.repaint();
				}
			}
		});
	}

	void windowClosing() {
		if (fw != null) {
			fw.stopThread();
			fw = null;
		}
	}

	private static final org.apache.logging.log4j.Logger logger = LogManager.getLogger();

	void saveScript() {
		if (fw != null) {
			fw.pause(true);
		}
		try {
			Utils.FileUtils.saveToFile(script.getCanonicalFile(), editScript.getText());
		} catch (IOException ex) {
			Logger.getLogger(PRunScript.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

}
