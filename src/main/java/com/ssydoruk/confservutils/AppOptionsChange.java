/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ssydoruk.confservutils;

import Utils.GridEditor;
import static Utils.Swing.checkBoxSelection;
import com.genesyslab.platform.commons.GEnum;
import com.genesyslab.platform.configuration.protocol.types.CfgAppType;
import com.jidesoft.swing.CheckBoxListSelectionModel;
import java.awt.Window;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import javax.swing.AbstractButton;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author stepan_sydoruk
 */
public class AppOptionsChange extends javax.swing.JPanel implements ISearchSettings, ISearchCommon, IUpdateSettings {

    private final AppForm theForm;

    /**
     * Creates new form AppByDBID
     */
    public AppOptionsChange(AppForm _theForm) {
        initComponents();
        theForm = _theForm;
        Utils.Swing.restrictHeight(tfObjectName);
        Utils.Swing.restrictHeight(tfOption);
        Utils.Swing.restrictHeight(tfOptionValue);
        Utils.Swing.restrictHeight(tfSection);

        Main.loadGenesysTypes(cbApplicationType, CfgAppType.values());

        ItemListener itemListener = new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {

                AbstractButton aButton = (AbstractButton) e.getSource();
                rbActionChanged(aButton.getModel().isSelected(), aButton);

            }
        };

        rbReplaceWith.addItemListener(itemListener);
        rbAddSection.addItemListener(itemListener);
        rbRemove.addItemListener(itemListener);
        rbRestoreFromBackup.addItemListener(itemListener);
        rbReplaceWith.setSelected(true);

    }

    /**
     *
     * @return application type if configured or null if all types
     */
    public CfgAppType getSelectedAppType() {
        Object ret = cbApplicationType.getSelectedItem();
        if (ret instanceof CfgObjectTypeMenu) {
            return (CfgAppType) ((CfgObjectTypeMenu) ret).getType();
        } else {
            return null;
        }
    }

    private void rbActionChanged(boolean isSelected, AbstractButton rbButton) {
        jpActions.setVisible(false);
        cbMakeBackup.setEnabled(rbAddSection.isSelected() || rbReplaceWith.isSelected());
        tfReplaceWith.setEnabled(rbReplaceWith.isSelected());
        btEditKVPs.setEnabled(rbAddSection.isSelected());

        jpActions.setVisible(true);
    }

    private static final Logger logger = Main.getLogger();

    @Override
    public boolean isCaseSensitive() {
        return cbCaseSensitive.isSelected();
    }

    @Override
    public boolean isRegex() {
        return cbIsRegex.isSelected();
    }

    @Override
    public boolean isFullOutputSelected() {
        return false;
    }

    private final ArrayList<UserProperties> updateProperties = new ArrayList<>();

    private GEnum cfgObjType(Object o) {
        if (o == null || o instanceof String) {
            return null;
        } else {
            return ((CfgObjectTypeMenu) o).getType();
        }
    }
    private GridEditor kvpEditor;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        bgReplaceAction = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        lbObjectName = new javax.swing.JLabel();
        tfObjectName = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        lbSection = new javax.swing.JLabel();
        tfSection = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        lbOption = new javax.swing.JLabel();
        tfOption = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        lbOptionValue = new javax.swing.JLabel();
        tfOptionValue = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        cbIsRegex = new javax.swing.JCheckBox();
        cbCaseSensitive = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbApplicationType = new javax.swing.JComboBox<>();
        jpActions = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        rbReplaceWith = new javax.swing.JRadioButton();
        tfReplaceWith = new javax.swing.JComboBox<>();
        cbMakeBackup = new javax.swing.JCheckBox();
        jPanel17 = new javax.swing.JPanel();
        rbAddSection = new javax.swing.JRadioButton();
        btEditKVPs = new javax.swing.JButton();
        rbRemove = new javax.swing.JRadioButton();
        rbRestoreFromBackup = new javax.swing.JRadioButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Search range"));
        jPanel10.setLayout(new javax.swing.BoxLayout(jPanel10, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));

        lbObjectName.setText("App name");
        jPanel6.add(lbObjectName);

        tfObjectName.setEditable(true);
        jPanel6.add(tfObjectName);

        jPanel12.add(jPanel6);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        lbSection.setText("Section name");
        jPanel3.add(lbSection);

        tfSection.setEditable(true);
        jPanel3.add(tfSection);

        jPanel12.add(jPanel3);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        lbOption.setText("Option name");
        jPanel1.add(lbOption);

        tfOption.setEditable(true);
        jPanel1.add(tfOption);

        jPanel12.add(jPanel1);

        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        lbOptionValue.setText("Option Value");
        jPanel5.add(lbOptionValue);

        tfOptionValue.setEditable(true);
        jPanel5.add(tfOptionValue);

        jPanel12.add(jPanel5);

        jPanel10.add(jPanel12);

        jPanel2.add(jPanel10);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.LINE_AXIS));

        cbIsRegex.setText("Regular expression");
        jPanel8.add(cbIsRegex);

        cbCaseSensitive.setText("Case sensitive");
        jPanel8.add(cbCaseSensitive);

        jPanel4.add(jPanel8);

        jPanel2.add(jPanel4);

        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.LINE_AXIS));

        jLabel2.setText("Application type");
        jPanel7.add(jLabel2);

        jPanel7.add(cbApplicationType);

        jPanel2.add(jPanel7);

        add(jPanel2);

        jpActions.setBorder(javax.swing.BorderFactory.createTitledBorder("Replace parameters"));
        jpActions.setLayout(new javax.swing.BoxLayout(jpActions, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel13.setLayout(new javax.swing.BoxLayout(jPanel13, javax.swing.BoxLayout.LINE_AXIS));

        jPanel14.setLayout(new javax.swing.BoxLayout(jPanel14, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setText("Found value");
        jPanel14.add(jLabel1);

        jPanel13.add(jPanel14);

        jPanel15.setLayout(new java.awt.GridLayout(0, 1));

        jPanel16.setLayout(new javax.swing.BoxLayout(jPanel16, javax.swing.BoxLayout.LINE_AXIS));

        bgReplaceAction.add(rbReplaceWith);
        rbReplaceWith.setText("Replace value with");
        jPanel16.add(rbReplaceWith);

        tfReplaceWith.setEditable(true);
        jPanel16.add(tfReplaceWith);

        cbMakeBackup.setSelected(true);
        cbMakeBackup.setText("make backup");
        jPanel16.add(cbMakeBackup);

        jPanel15.add(jPanel16);

        jPanel17.setLayout(new javax.swing.BoxLayout(jPanel17, javax.swing.BoxLayout.LINE_AXIS));

        bgReplaceAction.add(rbAddSection);
        rbAddSection.setText("add app KVP options");
        jPanel17.add(rbAddSection);

        btEditKVPs.setText("...");
        btEditKVPs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditKVPsActionPerformed(evt);
            }
        });
        jPanel17.add(btEditKVPs);

        jPanel15.add(jPanel17);

        bgReplaceAction.add(rbRemove);
        rbRemove.setText("Remove");
        jPanel15.add(rbRemove);

        bgReplaceAction.add(rbRestoreFromBackup);
        rbRestoreFromBackup.setText("restore from backup");
        jPanel15.add(rbRestoreFromBackup);

        jPanel13.add(jPanel15);

        jpActions.add(jPanel13);

        add(jpActions);
    }// </editor-fold>//GEN-END:initComponents

    private void btEditKVPsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditKVPsActionPerformed

        if (kvpEditor == null) {
            kvpEditor = new GridEditor((Window) this.getRootPane().getParent(), "KVPs to add",
                    "Select %d profiles");
        }
        ArrayList<Object[]> values = new ArrayList<>();
        for (UserProperties updateProperty : updateProperties) {
            values.add(new String[]{updateProperty.getSection(), updateProperty.getKey(), updateProperty.getValue()});

        }
//        for (StoredSettings.ConfServer configServer : ds.getConfigServers()) {
//            Object[] v = new Object[4];
//            v[0] = configServer.getProfile();
//            v[1] = configServer.getHost();
//            v[2] = configServer.getPort();
//            v[3] = configServer.getApp();
//            values.add(v);
//        }
        //        for (DownloadSettings.LFMTHostInstance hi : ds.getLfmtHostInstances()) {
        //            values.add(new Object[]{hi.getHost(), hi.getInstance(), hi.getBaseDir()});
        //        }
        kvpEditor.setData(new Object[]{"Section", "Key", "Value", "Action"},
                values, 3
        );
        kvpEditor.doShow();
        ArrayList<Object[]> data = kvpEditor.getData();

        updateProperties.clear();

        for (Object[] objects : data) {
            updateProperties.add(new UserProperties(objects[0].toString(), objects[1].toString(), objects[2].toString()));
        }

        btEditKVPs.setText((updateProperties.isEmpty()) ? "..." : updateProperties.size() + " kvp(s)");

    }//GEN-LAST:event_btEditKVPsActionPerformed

    public ArrayList<UserProperties> getUpdateProperties() {
        return updateProperties;
    }

    @Override
    public String getSection() {
        return checkBoxSelection(tfSection);
    }

    @Override
    public String getObjName() {
        if (!isSearchAll()) {
            return checkBoxSelection(tfObjectName);
        } else {
            return null;
        }
    }

    @Override
    public String getOption() {
        return checkBoxSelection(tfOption);
    }

    @Override
    public String getValue() {
        return checkBoxSelection(tfOptionValue);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgReplaceAction;
    private javax.swing.JButton btEditKVPs;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cbApplicationType;
    private javax.swing.JCheckBox cbCaseSensitive;
    private javax.swing.JCheckBox cbIsRegex;
    private javax.swing.JCheckBox cbMakeBackup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jpActions;
    private javax.swing.JLabel lbObjectName;
    private javax.swing.JLabel lbOption;
    private javax.swing.JLabel lbOptionValue;
    private javax.swing.JLabel lbSection;
    private javax.swing.JRadioButton rbAddSection;
    private javax.swing.JRadioButton rbRemove;
    private javax.swing.JRadioButton rbReplaceWith;
    private javax.swing.JRadioButton rbRestoreFromBackup;
    private javax.swing.JComboBox<String> tfObjectName;
    private javax.swing.JComboBox<String> tfOption;
    private javax.swing.JComboBox<String> tfOptionValue;
    private javax.swing.JComboBox<String> tfReplaceWith;
    private javax.swing.JComboBox<String> tfSection;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean isSearchAll() {
        return false;
    }

    @Override
    public String getAllSearch() {
        return null;

    }

    public String getSearchSummary(int maxTypes) {
        StringBuilder buf = new StringBuilder();
        buf.append("App by options;");

        if (isSearchAll()) {
            buf.append(" term \"")
                    .append(getAllSearch())
                    .append("\" in all fields, including object attributes");
        } else {
            if (getObjName() != null) {
                buf.append("\n\tname [")
                        .append(getObjName())
                        .append("]");
            }
            if (getSection() != null) {
                buf.append(" section [")
                        .append(getSection())
                        .append("]");
            }
            if (getOption() != null) {
                buf.append(" option [")
                        .append(getOption())
                        .append("]");
            }
            if (getValue() != null) {
                buf.append(" value [")
                        .append(getValue())
                        .append("]");
            }
        }
        buf.append(" rx[").append(isRegex() ? "yes" : "no").append("]");
        buf.append(" CaSe[").append(isCaseSensitive() ? "yes" : "no").append("]");
        buf.append("\naction: ").append(rbReplaceWith.isSelected() ? getReplaceWith()
                : rbAddSection.isSelected() ? getAddSection()
                : rbRemove.isSelected() ? rbRemove.getText()
                : rbRestoreFromBackup.isSelected() ? rbRestoreFromBackup.getText()
                : "");

        return buf.toString();
    }

    @Override
    public String getSearchSummary() {
        return getSearchSummary(-1);
    }

    @Override
    public void setChoices(Collection<String> choices) {

        Utils.Swing.setChoices(tfObjectName, choices);
        Utils.Swing.setChoices(tfOption, choices);
        Utils.Swing.setChoices(tfOptionValue, choices);
        Utils.Swing.setChoices(tfSection, choices);
    }

    @Override
    public Collection<String> getChoices() {

        return Utils.Swing.getChoices(tfObjectName,
                tfOption,
                tfOptionValue,
                tfSection);
    }

    private void modelUncheck(CheckBoxListSelectionModel selectionModel, GEnum[] gEnum) {
        HashSet<GEnum> en = new HashSet<>(Arrays.asList(gEnum));

        DefaultListModel model = (DefaultListModel) selectionModel.getModel();
        selectionModel.clearSelection();
        for (int i = 0; i < model.size(); i++) {
            if (i != selectionModel.getAllEntryIndex()) {
                CfgObjectTypeMenu get = (CfgObjectTypeMenu) model.get(i);
                if (!en.contains(get.getType())) {
                    selectionModel.addSelectionInterval(i, i);
                }
            }
        }

    }

    private StringBuilder getReplaceWith() {
        return new StringBuilder()
                .append(rbReplaceWith.getText())
                .append(" (")
                .append(checkBoxSelection(tfReplaceWith))
                .append(") backup:")
                .append(cbMakeBackup.isSelected());
    }

    private StringBuilder getAddSection() {
        StringBuilder ret = new StringBuilder(rbAddSection.getText());
        for (UserProperties updateProperty : updateProperties) {
            ret.append("\tsect[")
                    .append(updateProperty.getSection())
                    .append("] key[:")
                    .append(updateProperty.getKey())
                    .append("] val[:")
                    .append(updateProperty.getValue())
                    .append("]\n");

        }
        return ret;
    }

    boolean checkParameters() {
        if (rbAddSection.isSelected()) {
            if (updateProperties.isEmpty()) {
                JOptionPane.showMessageDialog(theForm, "To create an option all of the section, key and value needs to be specified", "Cannot proceed", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } else if (rbReplaceWith.isSelected()) {
            if (StringUtils.isBlank(checkBoxSelection(tfReplaceWith))) {
                JOptionPane.showMessageDialog(theForm, "\"Replace with \" string cannot be blank", "Cannot proceed", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }

    String getSearchSummaryHTML() {
        StringBuilder ret = new StringBuilder();
        ret.append("<html>").append(getSearchSummary(2).replaceAll("\n", "<br>")).append("</html>");
        return ret.toString();

    }

    @Override
    public boolean isMakeBackup() {
        return cbMakeBackup.isSelected();
    }

    @Override
    public KVPUpdateAction getKVPUpdateAction() {
        if (rbAddSection.isSelected()) {
            return KVPUpdateAction.ADD_SECTION;
        } else if (rbRemove.isSelected()) {
            return KVPUpdateAction.REMOVE;
        } else if (rbReplaceWith.isSelected()) {
            return KVPUpdateAction.REPLACE_WITH;
        } else {
            return KVPUpdateAction.RESTORE_FROM_BACKUP;
        }
    }

    @Override
    public String KVPreplaceWith(String currentValue) {
        return checkBoxSelection(tfReplaceWith);

    }

    @Override
    public String getReplaceKey(String stringKey) {
        return stringKey;
    }

    @Override
    public Collection<UserProperties> getAddedKVP() {
        return updateProperties;

    }

    @Override
    public ObjectUpdateAction getObjectUpdateAction() {
        return ObjectUpdateAction.KVP_CHANGE;
    }

    @Override
    public boolean isDeleteDependendObjects() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
